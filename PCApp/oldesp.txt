/**
 * TappieV2 - BLE Rotary Encoder Controller
 *
 * This device uses an ESP32 with a rotary encoder to control media playback
 * and volume via Bluetooth Low Energy (BLE).
 *
 * Features:
 * - Volume control via rotary encoder
 * - Multiple button actions (single click, double click, etc.)
 * - Auto-reset of encoder position after inactivity
 * - Low power consumption
 */

#include <Arduino.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <ESP32Encoder.h>
#include <OneButton.h>

// ===== PIN DEFINITIONS =====
#define ENCODER_PIN_DT 32
#define ENCODER_PIN_CLK 35
#define ENCODER_PIN_SW 34

#define AuxButtonPin 2
#define GamingButtonPin 4
#define MediaButtonPin 17
#define ChatButtonPin 18
#define MasterButtonPin 22

// ===== MediaButton Declarations =====
OneButton AuxButton(AuxButtonPin, true, true); // true: active low, true: enable internal pullup
OneButton GamingButton(GamingButtonPin, true, true); // true: active low, true: enable internal pullup
OneButton MediaButton(MediaButtonPin, true, true); // true: active low, true: enable internal pullup
OneButton ChatButton(ChatButtonPin, true, true); // true: active low, true: enable internal pullup
OneButton MasterButton(MasterButtonPin, true, true); // true: active low, true: enable internal pullup

// ===== BLE DEFINITIONS =====
#define BLE_DEVICE_NAME "TappieTest"
#define SERVICE_UUID "738b66f1-91b7-4f25-8ab8-31d38d56541a"
#define ENC_POS_UUID "a9c8c7b4-fb55-4d27-99e4-2c14b5812546"
#define ENC_BUTTON_UUID "0c2f5fbe-c20f-49ec-8c7c-ce0c9358e574"
#define MEDIA_BUTTON_UUID "9ff67916-665f-4489-b257-46d118b1e5eb"

// ===== TIMING CONSTANTS =====
#define AUTO_RESET_TIMEOUT 5000 // 5 seconds in milliseconds
#define BUTTON_NOTIFY_DELAY 100 // 100ms delay after button notifications

// ===== GLOBAL OBJECTS =====
ESP32Encoder encoder;
OneButton encButton(ENCODER_PIN_SW, true, true); // true: active low, true: enable internal pullup

// BLE server and characteristics
BLEServer *pServer = NULL;
BLECharacteristic *encPosChara = NULL;
BLECharacteristic *encButtonChara = NULL;
BLECharacteristic *mediaButtonChara = NULL;

// ===== STATE VARIABLES =====
bool deviceConnected = false;
bool oldDeviceConnected = false;

// Encoder position tracking
int prevEncPosition = 0;
int currentEncPosition = 0;

// Timer for auto-reset
unsigned long lastActivityTime = 0;

// ===== FUNCTION DECLARATIONS =====
void setupBLE();
void setupEncoder();
void setupMediaButtons();
void resetEncoder();
void encButtonSingleClick();
void encButtonDoubleClick();
void encButtonMultiClick();
void encButtonLongPressStop();
void handleConnectionChanges();
void mediaButtonClickHandler(const char* buttonName);

// ===== BLE CALLBACKS =====
/**
 * Callbacks for BLE connection events
 */
class MyServerCallbacks : public BLEServerCallbacks
{
  void onConnect(BLEServer *pServer)
  {
    deviceConnected = true;
    Serial.println("Device connected");
  };

  void onDisconnect(BLEServer *pServer)
  {
    deviceConnected = false;
    Serial.println("Device disconnected");
  }
};

// ===== SETUP FUNCTION =====
void setup()
{
  // Initialize serial communication
  Serial.begin(115200);
  Serial.println("Starting TappieV2 BLE Server...");

  // Reduce CPU frequency to save power
  setCpuFrequencyMhz(80); // Default is 240MHz

  // Initialize BLE
  setupBLE();

  // Initialize encoder and button
  setupEncoder();

  setupMediaButtons();

  // Initialize activity timer
  lastActivityTime = millis();

  Serial.println("Initialization complete - ready for connections");
}

void setupMediaButtons()
{
  pinMode(AuxButtonPin, INPUT_PULLUP);
  pinMode(GamingButtonPin, INPUT_PULLUP);
  pinMode(MediaButtonPin, INPUT_PULLUP);
  pinMode(ChatButtonPin, INPUT_PULLUP);
  pinMode(MasterButtonPin, INPUT_PULLUP);

  // Use lambda functions to pass the button name to the handler
  AuxButton.attachClick([]() { mediaButtonClickHandler("Aux"); });
  GamingButton.attachClick([]() { mediaButtonClickHandler("Gaming"); });
  MediaButton.attachClick([]() { mediaButtonClickHandler("Media"); });
  ChatButton.attachClick([]() { mediaButtonClickHandler("Chat"); });
  MasterButton.attachClick([]() { mediaButtonClickHandler("Master"); });

  Serial.println("Media buttons initialized");
}

/**
 * Generic button click handler that processes clicks for all buttons
 * @param buttonName Name of the button to include in notifications
 */
void mediaButtonClickHandler(const char* buttonName) 
{
  Serial.print("Button clicked: ");
  Serial.println(buttonName);

  if (deviceConnected) 
  {
    mediaButtonChara->setValue(buttonName);
    mediaButtonChara->notify();
  }
}

// ===== BLE SETUP =====
/**
 * Setup BLE server, service, and characteristics
 */
void setupBLE()
{
  // Create the BLE Device
  BLEDevice::init(BLE_DEVICE_NAME);
  BLEDevice::setPower(ESP_PWR_LVL_N12); // -12dBm, lowest power

  // Create the BLE Server
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  // Create the BLE Service
  BLEService *pService = pServer->createService(SERVICE_UUID);

  // Create Encoder Position Characteristic
  encPosChara = pService->createCharacteristic(
      ENC_POS_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY);

  encPosChara->addDescriptor(new BLE2902());
  encPosChara->setValue("0"); // Initial value

  // Create Button Action Characteristic
  encButtonChara = pService->createCharacteristic(
      ENC_BUTTON_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY);

  encButtonChara->addDescriptor(new BLE2902());
  encButtonChara->setValue("0"); // Initial value

  mediaButtonChara = pService->createCharacteristic(
      MEDIA_BUTTON_UUID,
      BLECharacteristic::PROPERTY_READ |
          BLECharacteristic::PROPERTY_WRITE |
          BLECharacteristic::PROPERTY_NOTIFY);
  mediaButtonChara->addDescriptor(new BLE2902());
  mediaButtonChara->setValue("Master"); // Initial value

  // Start the service
  pService->start();

  // Configure and start advertising
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinInterval(0x100); // 160ms
  pAdvertising->setMaxInterval(0x200); // 320ms
  BLEDevice::startAdvertising();

  Serial.println("BLE server ready for connections");
}

// ===== ENCODER SETUP =====
/**
 * Setup encoder and button with interrupts
 */
void setupEncoder()
{
  // Configure encoder pins with pull-up resistors
  pinMode(ENCODER_PIN_DT, INPUT_PULLUP);
  pinMode(ENCODER_PIN_CLK, INPUT_PULLUP);
  pinMode(ENCODER_PIN_SW, INPUT_PULLUP);

  // Configure ESP32Encoder for interrupt handling
  ESP32Encoder::useInternalWeakPullResistors = puType::up;

  // Initialize encoder with half quadrature mode
  encoder.attachHalfQuad(ENCODER_PIN_DT, ENCODER_PIN_CLK);
  encoder.clearCount();

  // Set encoder filter to reduce noise and debounce
  encoder.setFilter(1023);

  // Configure button handlers for different actions
  encButton.attachClick(encButtonSingleClick);
  encButton.attachDoubleClick(encButtonDoubleClick);
  encButton.attachMultiClick(encButtonMultiClick);
  encButton.attachLongPressStop(encButtonLongPressStop);

  Serial.println("Encoder and button initialized with interrupts");
}

// ===== ENCODER RESET =====
/**
 * Reset encoder position and notify clients
 */
void resetEncoder()
{
  encoder.clearCount();
  prevEncPosition = 0;
  currentEncPosition = 0;
  Serial.println("Encoder count auto-reset after inactivity");

  // Send reset notification to connected client
  if (deviceConnected)
  {
    encPosChara->setValue("0");
    encPosChara->notify();
  }

  // Update the activity timer
  lastActivityTime = millis();
}

// ===== BUTTON HANDLERS =====
/**
 * Handle single click event
 */
void encButtonSingleClick()
{
  Serial.println("Button: Single click");

  if (deviceConnected)
  {
    encButtonChara->setValue("single click");
    encButtonChara->notify();

    delay(BUTTON_NOTIFY_DELAY);
    encButtonChara->setValue("0");
    encButtonChara->notify();
  }
}

/**
 * Handle double click event
 */
void encButtonDoubleClick()
{
  Serial.println("Button: Double click");

  if (deviceConnected)
  {
    encButtonChara->setValue("double click");
    encButtonChara->notify();

    delay(BUTTON_NOTIFY_DELAY);
    encButtonChara->setValue("0");
    encButtonChara->notify();
  }
}

/**
 * Handle multi-click (â‰¥3 clicks) event
 */
void encButtonMultiClick()
{
  Serial.println("Button: Multi click");

  if (deviceConnected)
  {
    encButtonChara->setValue("multi click");
    encButtonChara->notify();

    delay(BUTTON_NOTIFY_DELAY);
    encButtonChara->setValue("0");
    encButtonChara->notify();
  }
}

/**
 * Handle long press event
 */
void encButtonLongPressStop()
{
  Serial.println("Button: Long press");

  if (deviceConnected)
  {
    encButtonChara->setValue("long press stop");
    encButtonChara->notify();

    delay(BUTTON_NOTIFY_DELAY);
    encButtonChara->setValue("0");
    encButtonChara->notify();
  }
}

/**
 * Check and handle BLE connection state changes
 */
void handleConnectionChanges()
{
  // Handle disconnection
  if (!deviceConnected && oldDeviceConnected)
  {
    // Give BLE stack time to get ready for new connections
    delay(500);

    // Restart advertising
    pServer->startAdvertising();
    Serial.println("Restarting advertising");
    oldDeviceConnected = deviceConnected;
  }

  // Handle new connection
  if (deviceConnected && !oldDeviceConnected)
  {
    Serial.println("Client connected");
    oldDeviceConnected = deviceConnected;

    // When client connects, send current position
    String encPositionStr = String(currentEncPosition);
    encPosChara->setValue(encPositionStr.c_str());
    encPosChara->notify();
  }
}

// ===== MAIN LOOP =====
void loop()
{
  // Process button events
  encButton.tick();
  AuxButton.tick();
  GamingButton.tick();
  MediaButton.tick();
  ChatButton.tick();
  MasterButton.tick();
  
  // Get current encoder position
  currentEncPosition = encoder.getCount() / 2;

  // Handle encoder position changes
  if (currentEncPosition != prevEncPosition)
  {
    // Update the activity timer
    lastActivityTime = millis();

    if (deviceConnected)
    {
      // Convert position to string and notify client
      String encPositionStr = String(currentEncPosition);
      encPosChara->setValue(encPositionStr.c_str());
      encPosChara->notify();

      Serial.print("Encoder position: ");
      Serial.println(currentEncPosition);
    }

    // Update previous position
    prevEncPosition = currentEncPosition;
  }

  // Auto-reset encoder after inactivity period (only if not at zero)
  if (millis() - lastActivityTime > AUTO_RESET_TIMEOUT && currentEncPosition != 0)
  {
    resetEncoder();
  }

  // Handle BLE connection changes
  handleConnectionChanges();

  // Small delay to prevent CPU hogging
  delay(5);
}